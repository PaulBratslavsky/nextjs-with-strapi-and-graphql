import React from "react";
import { useRouter } from "next/router";

import { gql } from "@apollo/client";
import client from "../../graphql-client";
import { formatDate } from "../../utils/helpers";

import Image from "next/image";
import Head from "next/head";
import Header from "../../components/Header";
import Video from "../../components/Video";
import Code from "../../components/Code";
import Markdown from "../../components/Markdown";
import PostsNav from "../../components/PostsNav";
import Tags from "../../components/Tags";
import Photo from "../../components/Photo";
import Layout from "../../components/Layout";

function selelctCoponent(components) {
  return components.map((component) => {
    const type = component.__typename;

    switch (type) {
      case "ComponentMyComponentsVideo":
        return <Video data={component} />;

      case "ComponentMyComponentsCode":
        return <Code data={component} />;

      case "ComponentMyComponentsMarkdown":
        return <Markdown data={component} />;

      case "ComponentMyComponentsImage":
        return <Photo data={component} />;

      default:
        return null;
    }
  });
}

export default function Posts({ post = undefined, postsGroup = [], tagsData }) {
  const router = useRouter();

  const posts = postsGroup.data.attributes.posts_in_group.data;

  const { Components, publishedAt, title, description, tags } =
    post.post.data.attributes;

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout
        header={(setSidebarOpen) => <Header setSidebarOpen={setSidebarOpen} />}
        sidebar={(setSidebarOpen) => (
          <PostsNav
            current={router.query.slug}
            postItems={posts}
            setSidebarOpen={setSidebarOpen}
            tags={tagsData}
          />
        )}
      >
        <main className="col-span-4 px-6 md:px-0">
          <div className="card-body p-0">
            <div className="hero h-full rounded-xl shadow-lg overflow-hidden">
              <div className="hero-overlay bg-base-200"></div>
              <div className="hero-content justify-start w-full text-neutral-content py-6">
                <div className="">
                  <h1 className="mb-5 text-5xl font-bold">{title}</h1>
                  <p className="mb-5">{description}</p>
                  <Tags tags={tags.data} />
                  <div className="relative flex items-center space-x-3 py-4 mt-4">
                    <Image
                      className="w-10 h-10 rounded-full"
                      src="https://res.cloudinary.com/dq2cllwgp/image/upload/v1661228928/buildinpyblick/paul_bda035c081.jpg"
                      width={65}
                      height={65}
                      alt="Paul Bratslavsky"
                    />

                    <div>
                      <div className="text-info font-semibold">
                        Paul Bratslavsky
                      </div>
                      <div className="text-xs">
                        Published on {formatDate(publishedAt)}
                      </div>
                      <div className="flex mt-1">
                        <a
                          href="https://twitter.com/codingthirty"
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-lg"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="22"
                            height="22"
                            viewBox="0 0 24 24"
                            className="fill-current text-info"
                          >
                            <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"></path>
                          </svg>
                        </a>
                        <a
                          href="https://www.youtube.com/c/codingafterthirty"
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="22"
                            height="22"
                            viewBox="0 0 24 24"
                            className="fill-current text-red-600 ml-2"
                          >
                            <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"></path>
                          </svg>
                        </a>
                        <a
                          href="https://www.linkedin.com/in/paulbratslavsky"
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="22px"
                            height="22px"
                            viewBox="0 0 22 22"
                            className="fill-current mt-[3px] text-warning ml-3"
                          >
                            <path d="M14.5 0h-13c-0.825 0-1.5 0.675-1.5 1.5v13c0 0.825 0.675 1.5 1.5 1.5h13c0.825 0 1.5-0.675 1.5-1.5v-13c0-0.825-0.675-1.5-1.5-1.5zM6 13h-2v-7h2v7zM5 5c-0.553 0-1-0.447-1-1s0.447-1 1-1c0.553 0 1 0.447 1 1s-0.447 1-1 1zM13 13h-2v-4c0-0.553-0.447-1-1-1s-1 0.447-1 1v4h-2v-7h2v1.241c0.412-0.566 1.044-1.241 1.75-1.241 1.244 0 2.25 1.119 2.25 2.5v4.5z"></path>
                          </svg>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div>{selelctCoponent(Components)}</div>
          </div>
        </main>
      </Layout>
    </div>
  );
}

export async function getStaticPaths() {
  const { data } = await client.query({
    query: gql`
      query {
        posts {
          data {
            id
            attributes {
              title
              slug
            }
          }
        }
      }
    `,
  });

  const paths = data.posts.data.map((post) => ({
    params: { slug: post.attributes.slug },
  }));

  return {
    paths: paths,
    fallback: false,
  };
}

export async function getStaticProps({ params }) {
  const { data: post } = await client.query({
    query: gql`
      query {
        post(slug: "${params.slug}") {
          data {
            id 
            attributes {
              title
              description
              publishedAt

              tags {
                data {
                  id
                  attributes {
                    name
                  }
                }
              }

              seo {
                metaTitle
                metaDescription
                keywords
              }
              
              Components {
                ... on ComponentMyComponentsVideo {
                  id
                  title
                  description
                  link
                  videoID
                }
                
                ... on ComponentMyComponentsCode {
                  id
                  name
                  src
                  type
                  content
                }

                ... on ComponentMyComponentsImage {
                  id
                  title
                  description
                  alt
                  height
                  width
                  image {
                    data {
                      id
                      attributes {
                        url
                      }
                    }
                  }
                }

                ... on ComponentMyComponentsMarkdown {
                  id
                  content
                }

              }
              featuredImage {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
          }
        }
      }
    `,
  });

  const { data: postsData } = await client.query({
    // query: gql`
    //   query {
    //     posts {
    //       data {
    //         id
    //         attributes {
    //           title
    //           slug

    //           tags {
    //             data {
    //               id
    //               attributes {
    //                 name
    //               }
    //             }
    //           }
    //         }
    //       }
    //     }
    //   }
    // `,

    query: gql`
      query {
        postGroup(id: 4) {
          data {
            id
            attributes {
              title
              posts_in_group {
                data {
                  id
                  attributes {
                    title
                    slug

                    tags {
                      data {
                        id
                        attributes {
                          name
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  });

  const { data: tagsData } = await client.query({
    query: gql`
      query {
        tags(filters: { posts: { post_group: { id: { eq: 4 } } } }) {
          data {
            id
            attributes {
              name
              posts(filters: { post_group: { id: { eq: 4 } } }) {
                data {
                  id
                }
              }
            }
          }
          meta {
            pagination {
              pageCount
            }
          }
        }
      }
    `,
  });

  return {
    props: {
      post: post,
      postsGroup: postsData.postGroup,
      tagsData: tagsData.tags,
    },
  };
}
/*  <div className="h-screen grid grid-cols-5 gap-3">
      <div className="height-with-menu overflow-scroll">
        <PostsNav
          current={router.query.slug}
          postItems={postItems.posts.data}
        />
      </div>

      <main className="height-with-menu col-span-4 overflow-scroll my-6 px-6">
        <div className="card-body p-0">
          <div
            className="hero h-full rounded-xl shadow-lg overflow-hidden"
            style={{
              backgroundImage: `url(${featuredImage.data.attributes.url}?w=1000&h=800)`,
            }}
          >
            <div className="hero-overlay bg-opacity-60"></div>
            <div className="hero-content justify-start w-full text-neutral-content  py-6">
              <div className="">
                <h1 className="mb-5 text-5xl font-bold">{title}</h1>
                <p className="mb-5">{description}</p>
                <Tags tags={tags.data} />
              </div>
            </div>
          </div>
          <div>{selelctCoponent(Components)}</div>
        </div>
      </main>
    </div>
  */
