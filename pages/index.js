import Head from "next/head";
import Image from "next/image";

import { useRouter } from "next/router";

const appBaseUrl = process.env.baseURL;

import { gql } from "@apollo/client";
import client from "../graphql-client";

export default function Home({ posts }) {
  const router = useRouter();

  if (!posts) return <h2>No posts found</h2>;

  const { data } = posts;

  function displayCard(data) {
    return data.map((post) => {
      const { url } = post.attributes.featuredImage.data.attributes;
      return (
        <div
          key={post.id}
          className="card lg:card-side bg-base-100 shadow-xl mb-6"
        >
          <figure>
            <Image
              src={url}
              alt={post.attributes.title}
              width={300}
              height={300}
            />
          </figure>
          <div className="card-body">
            <h2 className="card-title">{post.attributes.title}</h2>
            <p>{post.attributes.description}</p>
            <div className="card-actions justify-end">
              <button
                className="btn btn-primary"
                onClick={() =>
                  router.push(appBaseUrl + "/posts/" + post.attributes.slug)
                }
              >
                Read More
              </button>
            </div>
          </div>
        </div>
      );
    });
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="grid grid-cols-7 gap-3">
        <div className="height-with-menu col-span-2 overflow-scroll">link</div>

        <main className="height-with-menu col-span-5 overflow-scroll my-6">
          {displayCard(data)}
        </main>
      </div>
    </div>
  );
}

export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
      query {
        posts {
          data {
            id
            attributes {
              title
              slug
              description

              featuredImage {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
          }
          meta {
            pagination {
              total
            }
          }
        }
      }
    `,
  });

  return {
    props: {
      posts: data.posts,
    },
  };
}
